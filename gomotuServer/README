网络服务器的设计：

/****************************************0.0.1************************************************/	
版本号：0.1
	1、接受TCP连接
	2、解析数据报转发数据报
	3、epoll：来监听描述符的状态，使用ET模式，非阻塞的文件描述符，循环的处理数据。这样效率最高。
	4、遇到一个需要处理的事件就创建一个线程，线程处理完成后自动结束。
文件介绍：
	mainServer.c 	是网络程序的主要进程的入口。
	list.h list.c 	原始的链表的实现。
	dataType.h	服务器和客户端之间的通信的数据格式，链表的结点的数据格式。
	threadFun.c threadFun.h 处理客户端发来的消息的线程有关的函数。
整体结构：
	1、初始化变量，全局数据结构，锁
	2、初始化socket与epoll
	3、循环用epoll去处理文件描述符的事件
		1、对待客户端的响应，创建新的线程去处理
		2、在线程中调用不同的功能函数处理具体功能
		3、处理完成后线程自动结束
主要知识点：
	epoll的高并发处理模型
	多线程的创建与同步，线程池（后续版本）
	简单的数据结构（链表）
	算法（暂时没有）
	tcp协议的深入应用（无）
fix bug：
	网络注册成功之后不断开连接，因为登录信息需要，客户端发来名字。
	删除了服务器处理时间为0的事件处理，因为这样会造成两个客户端对时间处理的困难，等后续版本在做修改。
	修复了开始匹配时，回复两个客户端的内容写反了，并且内存释放过早的错误。
	添加了开始匹配并且加入等待队列的信号201
	在接收客户端的close信号之后，read的返回值为0，在判断中添加检查并释放资源的功能
	将重新匹配的设计改为，如果有不想继续玩的人发来信息，就直接断开两个人的连接，不在给他们重新匹配
	删除服务器主动断开连接的事件，将资源的释放移动到，处理客户端主动断开连接的地方。
待解决问题：
	用valgrind进行检测发现，存在内存未释放的问题，和未初始化的问题，还有一些错误，需要修复。

/******************************************0.0.2**********************************************/




